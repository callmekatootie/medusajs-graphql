type Customer {
  id: ID!
  billing_address_id: ID
  billing_address: Address
  created_at: String
  deleted_at: String
  email: String!
  first_name: String!
  groups: [CustomerGroup!]!
  has_account: Boolean
  last_name: String!
  metadata: String
  orders: [Order!]!
  phone: String
  shipping_addresses: [Address!]!
  updated_at: String
}

type Exists {
  exists: Boolean
}

type PaymentMethodsResponse {
  provider_id: ID
  data: String
}

input AddShippingAddressInput {
  address_1: String!
  address_2: String
  city: String!
  company: String
  country_code: String!
  first_name: String!
  last_name: String!
  metadata: String
  phone: String
  postal_code: String!
  province: String
}

input CreateCustomerInput {
  email: String!
  first_name: String!
  last_name: String!
  password: String!
  phone: String
}

input UpdateCustomerInput {
  billing_address: UpdateCustomerBillingAddressInput
  email: String
  first_name: String
  last_name: String
  password: String
  phone: String
  metadata: String
}

input DeleteShippingAddressInput {
  id: ID!
}

input ResetPasswordInput {
  email: String!
  password: String!
  token: String!
}

input ResetPasswordTokenInput {
  email: String!
}

input UpdateCustomerBillingAddressInput {
  address_1: String
  address_2: String
  city: String
  company: String
  country_code: String
  first_name: String
  last_name: String
  metadata: String
  phone: String
  postal_code: String
  province: String
}

input UpdateShippingAddressInput {
  id: ID!
  address_1: String
  address_2: String
  city: String
  company: String
  country_code: String
  first_name: String
  last_name: String
  metadata: String
  phone: String
  postal_code: String
  province: String
}

type ListOrdersResponse {
  count: Int
  limit: Int
  offset: Int
  orders: [Order!]!
}

type Mutation {
  createCustomer(input: CreateCustomerInput): Customer
  addShippingAddress(input: AddShippingAddressInput): Customer
  deleteShippingAddress(input: DeleteShippingAddressInput): Customer
  resetPassword(input: ResetPasswordInput): Customer
  requestPasswordReset(input: ResetPasswordTokenInput): NoContentResponse
  updateCustomer(input: UpdateCustomerInput): Customer
  updateShippingAddress(input: UpdateShippingAddressInput): Customer
}

type Query {
  getCurrentCustomer: Customer
  getPaymentMethods: [PaymentMethodsResponse!]!
  listOrders(
    cart_id: ID
    canceled_at: DateComparison
    created_at: DateComparison
    currency_code: String
    display_id: ID
    email: String
    expand: String
    fields: String
    fulfillment_status: [String!]
    limit: Int
    id: ID
    offset: Int
    payment_status: [String!]
    q: String
    region_id: ID
    status: [String!]
    tax_rate: String
    updated_at: DateComparison
  ): [ListOrdersResponse!]!
}
