type ProductCollection {
  id: ID!
  created_at: String
  deleted_at: String
  handle: String
  metadata: String
  # TODO - Define product and then attach this attribute and create resolver
  # products: [Product!]!
  title: String
  updated_at: String
}

type Query {
  getProductCollection(id: ID!): ProductCollection
  listProductCollections(
    created_at: DateComparison,
    deleted_at: DateComparison,
    handle: String
    limit: Int
    offset: Int
    q: String
    title: String
    updated_at: DateComparison
  ): [ProductCollection!]! 
}

input CreateProductCollectionInput {
  title: String!
  handle: String
  metadata: String
}

input DeleteProductCollectionInput {
  id: ID!
}

input UpdateProductCollectionInput {
  id: ID!
  title: String
  handle: String
  metadata: String
}

type Mutation {
  createProductCollection(input: CreateProductCollectionInput): ProductCollection
  deleteProductCollection(input: DeleteProductCollectionInput): DeletionResponse
  updateProductCollection(input: UpdateProductCollectionInput): ProductCollection
}
